// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster_comm.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RaftState int32

const (
	RaftState_Leader   RaftState = 0
	RaftState_Voter    RaftState = 1
	RaftState_Nonvoter RaftState = 2
	RaftState_None     RaftState = 3
)

var RaftState_name = map[int32]string{
	0: "Leader",
	1: "Voter",
	2: "Nonvoter",
	3: "None",
}
var RaftState_value = map[string]int32{
	"Leader":   0,
	"Voter":    1,
	"Nonvoter": 2,
	"None":     3,
}

func (x RaftState) String() string {
	return proto.EnumName(RaftState_name, int32(x))
}
func (RaftState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RaftServiceError int32

const (
	RaftServiceError_NotLeader RaftServiceError = 0
)

var RaftServiceError_name = map[int32]string{
	0: "NotLeader",
}
var RaftServiceError_value = map[string]int32{
	"NotLeader": 0,
}

func (x RaftServiceError) String() string {
	return proto.EnumName(RaftServiceError_name, int32(x))
}
func (RaftServiceError) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type NodeInfo struct {
	// contains hostname
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// the unique id of a node
	NodeId int32 `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
	// the port on which the raft library operates
	RaftPort int32 `protobuf:"varint,3,opt,name=raftPort" json:"raftPort,omitempty"`
	// the port on which the grpc consensus protocol operates
	ValueServerPort int32 `protobuf:"varint,4,opt,name=valueServerPort" json:"valueServerPort,omitempty"`
	// the port on which the grid protocol operates
	GridPort int32 `protobuf:"varint,5,opt,name=gridPort" json:"gridPort,omitempty"`
	// the port on which serf operates
	SerfPort int32 `protobuf:"varint,6,opt,name=serfPort" json:"serfPort,omitempty"`
	// the state of a particular node
	RaftState RaftState `protobuf:"varint,7,opt,name=raftState,enum=pb.RaftState" json:"raftState,omitempty"`
	// copy of the serf tags
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NodeInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *NodeInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeInfo) GetRaftPort() int32 {
	if m != nil {
		return m.RaftPort
	}
	return 0
}

func (m *NodeInfo) GetValueServerPort() int32 {
	if m != nil {
		return m.ValueServerPort
	}
	return 0
}

func (m *NodeInfo) GetGridPort() int32 {
	if m != nil {
		return m.GridPort
	}
	return 0
}

func (m *NodeInfo) GetSerfPort() int32 {
	if m != nil {
		return m.SerfPort
	}
	return 0
}

func (m *NodeInfo) GetRaftState() RaftState {
	if m != nil {
		return m.RaftState
	}
	return RaftState_Leader
}

func (m *NodeInfo) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// This is the base raft command that can be sent.
// All actual commands need to appear in here and be part of this composition.
// Unfortunately that means that there's multiple places where messages need to be added.
// Here, on the sending side, and the receiving end. Well...you can't have everything in life.
type RaftCommand struct {
	// Types that are valid to be assigned to Cmd:
	//	*RaftCommand_GetCmd
	//	*RaftCommand_SetCmd
	//	*RaftCommand_DeleteCmd
	//	*RaftCommand_NodeIdCmd
	Cmd isRaftCommand_Cmd `protobuf_oneof:"cmd"`
}

func (m *RaftCommand) Reset()                    { *m = RaftCommand{} }
func (m *RaftCommand) String() string            { return proto.CompactTextString(m) }
func (*RaftCommand) ProtoMessage()               {}
func (*RaftCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isRaftCommand_Cmd interface {
	isRaftCommand_Cmd()
}

type RaftCommand_GetCmd struct {
	GetCmd *GetCommand `protobuf:"bytes,1,opt,name=getCmd,oneof"`
}
type RaftCommand_SetCmd struct {
	SetCmd *SetCommand `protobuf:"bytes,2,opt,name=setCmd,oneof"`
}
type RaftCommand_DeleteCmd struct {
	DeleteCmd *DeleteCommand `protobuf:"bytes,3,opt,name=deleteCmd,oneof"`
}
type RaftCommand_NodeIdCmd struct {
	NodeIdCmd *NodeIdCommand `protobuf:"bytes,4,opt,name=nodeIdCmd,oneof"`
}

func (*RaftCommand_GetCmd) isRaftCommand_Cmd()    {}
func (*RaftCommand_SetCmd) isRaftCommand_Cmd()    {}
func (*RaftCommand_DeleteCmd) isRaftCommand_Cmd() {}
func (*RaftCommand_NodeIdCmd) isRaftCommand_Cmd() {}

func (m *RaftCommand) GetCmd() isRaftCommand_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *RaftCommand) GetGetCmd() *GetCommand {
	if x, ok := m.GetCmd().(*RaftCommand_GetCmd); ok {
		return x.GetCmd
	}
	return nil
}

func (m *RaftCommand) GetSetCmd() *SetCommand {
	if x, ok := m.GetCmd().(*RaftCommand_SetCmd); ok {
		return x.SetCmd
	}
	return nil
}

func (m *RaftCommand) GetDeleteCmd() *DeleteCommand {
	if x, ok := m.GetCmd().(*RaftCommand_DeleteCmd); ok {
		return x.DeleteCmd
	}
	return nil
}

func (m *RaftCommand) GetNodeIdCmd() *NodeIdCommand {
	if x, ok := m.GetCmd().(*RaftCommand_NodeIdCmd); ok {
		return x.NodeIdCmd
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RaftCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RaftCommand_OneofMarshaler, _RaftCommand_OneofUnmarshaler, _RaftCommand_OneofSizer, []interface{}{
		(*RaftCommand_GetCmd)(nil),
		(*RaftCommand_SetCmd)(nil),
		(*RaftCommand_DeleteCmd)(nil),
		(*RaftCommand_NodeIdCmd)(nil),
	}
}

func _RaftCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RaftCommand)
	// cmd
	switch x := m.Cmd.(type) {
	case *RaftCommand_GetCmd:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetCmd); err != nil {
			return err
		}
	case *RaftCommand_SetCmd:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetCmd); err != nil {
			return err
		}
	case *RaftCommand_DeleteCmd:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteCmd); err != nil {
			return err
		}
	case *RaftCommand_NodeIdCmd:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeIdCmd); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RaftCommand.Cmd has unexpected type %T", x)
	}
	return nil
}

func _RaftCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RaftCommand)
	switch tag {
	case 1: // cmd.getCmd
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetCommand)
		err := b.DecodeMessage(msg)
		m.Cmd = &RaftCommand_GetCmd{msg}
		return true, err
	case 2: // cmd.setCmd
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetCommand)
		err := b.DecodeMessage(msg)
		m.Cmd = &RaftCommand_SetCmd{msg}
		return true, err
	case 3: // cmd.deleteCmd
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteCommand)
		err := b.DecodeMessage(msg)
		m.Cmd = &RaftCommand_DeleteCmd{msg}
		return true, err
	case 4: // cmd.nodeIdCmd
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeIdCommand)
		err := b.DecodeMessage(msg)
		m.Cmd = &RaftCommand_NodeIdCmd{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RaftCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RaftCommand)
	// cmd
	switch x := m.Cmd.(type) {
	case *RaftCommand_GetCmd:
		s := proto.Size(x.GetCmd)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftCommand_SetCmd:
		s := proto.Size(x.SetCmd)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftCommand_DeleteCmd:
		s := proto.Size(x.DeleteCmd)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftCommand_NodeIdCmd:
		s := proto.Size(x.NodeIdCmd)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// This is "consistent get" message.
// The advantage is: This read will be up-to-date with the strongly consistent store.
// The bad part is: It need to travel to the leader, be processed, and replicated.
// Pretty expensive if you can live with stale data, do that instead.
type GetCommand struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetCommand) Reset()                    { *m = GetCommand{} }
func (m *GetCommand) String() string            { return proto.CompactTextString(m) }
func (*GetCommand) ProtoMessage()               {}
func (*GetCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetCommand) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// This sets a key-value-pair in the consistent store.
type SetCommand struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetCommand) Reset()                    { *m = SetCommand{} }
func (m *SetCommand) String() string            { return proto.CompactTextString(m) }
func (*SetCommand) ProtoMessage()               {}
func (*SetCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SetCommand) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetCommand) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// This deletes a key-value-pair from the consistent store.
type DeleteCommand struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteCommand) Reset()                    { *m = DeleteCommand{} }
func (m *DeleteCommand) String() string            { return proto.CompactTextString(m) }
func (*DeleteCommand) ProtoMessage()               {}
func (*DeleteCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DeleteCommand) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// This allocates a cluster-wide unique short node id from the consistent store.
type NodeIdCommand struct {
}

func (m *NodeIdCommand) Reset()                    { *m = NodeIdCommand{} }
func (m *NodeIdCommand) String() string            { return proto.CompactTextString(m) }
func (*NodeIdCommand) ProtoMessage()               {}
func (*NodeIdCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// I decided to cheap this out and make all of this a proto
type RaftSnapshot struct {
	Snap map[string][]byte `protobuf:"bytes,1,rep,name=snap" json:"snap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RaftSnapshot) Reset()                    { *m = RaftSnapshot{} }
func (m *RaftSnapshot) String() string            { return proto.CompactTextString(m) }
func (*RaftSnapshot) ProtoMessage()               {}
func (*RaftSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RaftSnapshot) GetSnap() map[string][]byte {
	if m != nil {
		return m.Snap
	}
	return nil
}

type RaftVoterState struct {
	Voters    map[string]bool      `protobuf:"bytes,1,rep,name=voters" json:"voters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Nonvoters map[string]bool      `protobuf:"bytes,2,rep,name=nonvoters" json:"nonvoters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Nones     map[string]bool      `protobuf:"bytes,3,rep,name=nones" json:"nones,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AllNodes  map[string]*NodeInfo `protobuf:"bytes,4,rep,name=allNodes" json:"allNodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RaftVoterState) Reset()                    { *m = RaftVoterState{} }
func (m *RaftVoterState) String() string            { return proto.CompactTextString(m) }
func (*RaftVoterState) ProtoMessage()               {}
func (*RaftVoterState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *RaftVoterState) GetVoters() map[string]bool {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *RaftVoterState) GetNonvoters() map[string]bool {
	if m != nil {
		return m.Nonvoters
	}
	return nil
}

func (m *RaftVoterState) GetNones() map[string]bool {
	if m != nil {
		return m.Nones
	}
	return nil
}

func (m *RaftVoterState) GetAllNodes() map[string]*NodeInfo {
	if m != nil {
		return m.AllNodes
	}
	return nil
}

type GetReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResp struct {
	Error RaftServiceError `protobuf:"varint,1,opt,name=error,enum=pb.RaftServiceError" json:"error,omitempty"`
	Value []byte           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResp) Reset()                    { *m = GetResp{} }
func (m *GetResp) String() string            { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()               {}
func (*GetResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GetResp) GetError() RaftServiceError {
	if m != nil {
		return m.Error
	}
	return RaftServiceError_NotLeader
}

func (m *GetResp) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetReq struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetReq) Reset()                    { *m = SetReq{} }
func (m *SetReq) String() string            { return proto.CompactTextString(m) }
func (*SetReq) ProtoMessage()               {}
func (*SetReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *SetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetResp struct {
	Error   RaftServiceError `protobuf:"varint,1,opt,name=error,enum=pb.RaftServiceError" json:"error,omitempty"`
	Created bool             `protobuf:"varint,2,opt,name=created" json:"created,omitempty"`
}

func (m *SetResp) Reset()                    { *m = SetResp{} }
func (m *SetResp) String() string            { return proto.CompactTextString(m) }
func (*SetResp) ProtoMessage()               {}
func (*SetResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SetResp) GetError() RaftServiceError {
	if m != nil {
		return m.Error
	}
	return RaftServiceError_NotLeader
}

func (m *SetResp) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type DeleteReq struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteReq) Reset()                    { *m = DeleteReq{} }
func (m *DeleteReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()               {}
func (*DeleteReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *DeleteReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteResp struct {
	Error   RaftServiceError `protobuf:"varint,1,opt,name=error,enum=pb.RaftServiceError" json:"error,omitempty"`
	Deleted bool             `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteResp) Reset()                    { *m = DeleteResp{} }
func (m *DeleteResp) String() string            { return proto.CompactTextString(m) }
func (*DeleteResp) ProtoMessage()               {}
func (*DeleteResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *DeleteResp) GetError() RaftServiceError {
	if m != nil {
		return m.Error
	}
	return RaftServiceError_NotLeader
}

func (m *DeleteResp) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type AcquireUniqueShortNodeIdReq struct {
}

func (m *AcquireUniqueShortNodeIdReq) Reset()                    { *m = AcquireUniqueShortNodeIdReq{} }
func (m *AcquireUniqueShortNodeIdReq) String() string            { return proto.CompactTextString(m) }
func (*AcquireUniqueShortNodeIdReq) ProtoMessage()               {}
func (*AcquireUniqueShortNodeIdReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type AcquireUniqueShortNodeIdResp struct {
	Error  RaftServiceError `protobuf:"varint,1,opt,name=error,enum=pb.RaftServiceError" json:"error,omitempty"`
	NodeId int32            `protobuf:"varint,2,opt,name=nodeId" json:"nodeId,omitempty"`
}

func (m *AcquireUniqueShortNodeIdResp) Reset()                    { *m = AcquireUniqueShortNodeIdResp{} }
func (m *AcquireUniqueShortNodeIdResp) String() string            { return proto.CompactTextString(m) }
func (*AcquireUniqueShortNodeIdResp) ProtoMessage()               {}
func (*AcquireUniqueShortNodeIdResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *AcquireUniqueShortNodeIdResp) GetError() RaftServiceError {
	if m != nil {
		return m.Error
	}
	return RaftServiceError_NotLeader
}

func (m *AcquireUniqueShortNodeIdResp) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "pb.NodeInfo")
	proto.RegisterType((*RaftCommand)(nil), "pb.RaftCommand")
	proto.RegisterType((*GetCommand)(nil), "pb.GetCommand")
	proto.RegisterType((*SetCommand)(nil), "pb.SetCommand")
	proto.RegisterType((*DeleteCommand)(nil), "pb.DeleteCommand")
	proto.RegisterType((*NodeIdCommand)(nil), "pb.NodeIdCommand")
	proto.RegisterType((*RaftSnapshot)(nil), "pb.RaftSnapshot")
	proto.RegisterType((*RaftVoterState)(nil), "pb.RaftVoterState")
	proto.RegisterType((*GetReq)(nil), "pb.GetReq")
	proto.RegisterType((*GetResp)(nil), "pb.GetResp")
	proto.RegisterType((*SetReq)(nil), "pb.SetReq")
	proto.RegisterType((*SetResp)(nil), "pb.SetResp")
	proto.RegisterType((*DeleteReq)(nil), "pb.DeleteReq")
	proto.RegisterType((*DeleteResp)(nil), "pb.DeleteResp")
	proto.RegisterType((*AcquireUniqueShortNodeIdReq)(nil), "pb.AcquireUniqueShortNodeIdReq")
	proto.RegisterType((*AcquireUniqueShortNodeIdResp)(nil), "pb.AcquireUniqueShortNodeIdResp")
	proto.RegisterEnum("pb.RaftState", RaftState_name, RaftState_value)
	proto.RegisterEnum("pb.RaftServiceError", RaftServiceError_name, RaftServiceError_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftService service

type RaftServiceClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	ConsistentGet(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	AcquireUniqueShortNodeId(ctx context.Context, in *AcquireUniqueShortNodeIdReq, opts ...grpc.CallOption) (*AcquireUniqueShortNodeIdResp, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := grpc.Invoke(ctx, "/pb.RaftService/get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) ConsistentGet(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := grpc.Invoke(ctx, "/pb.RaftService/consistentGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error) {
	out := new(SetResp)
	err := grpc.Invoke(ctx, "/pb.RaftService/set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := grpc.Invoke(ctx, "/pb.RaftService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) AcquireUniqueShortNodeId(ctx context.Context, in *AcquireUniqueShortNodeIdReq, opts ...grpc.CallOption) (*AcquireUniqueShortNodeIdResp, error) {
	out := new(AcquireUniqueShortNodeIdResp)
	err := grpc.Invoke(ctx, "/pb.RaftService/acquireUniqueShortNodeId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftService service

type RaftServiceServer interface {
	Get(context.Context, *GetReq) (*GetResp, error)
	ConsistentGet(context.Context, *GetReq) (*GetResp, error)
	Set(context.Context, *SetReq) (*SetResp, error)
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	AcquireUniqueShortNodeId(context.Context, *AcquireUniqueShortNodeIdReq) (*AcquireUniqueShortNodeIdResp, error)
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_ConsistentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).ConsistentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftService/ConsistentGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).ConsistentGet(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_AcquireUniqueShortNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireUniqueShortNodeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AcquireUniqueShortNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftService/AcquireUniqueShortNodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AcquireUniqueShortNodeId(ctx, req.(*AcquireUniqueShortNodeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _RaftService_Get_Handler,
		},
		{
			MethodName: "consistentGet",
			Handler:    _RaftService_ConsistentGet_Handler,
		},
		{
			MethodName: "set",
			Handler:    _RaftService_Set_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RaftService_Delete_Handler,
		},
		{
			MethodName: "acquireUniqueShortNodeId",
			Handler:    _RaftService_AcquireUniqueShortNodeId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster_comm.proto",
}

func init() { proto.RegisterFile("cluster_comm.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0xc7, 0x63, 0x1b, 0x0c, 0x3e, 0x7c, 0x84, 0x1d, 0x45, 0x91, 0xe5, 0xdd, 0x64, 0x1d, 0x5f,
	0xb1, 0xac, 0x84, 0x76, 0x49, 0xd5, 0xa6, 0x51, 0xa4, 0x2a, 0x4d, 0xa3, 0x34, 0x6a, 0x45, 0x2b,
	0xbb, 0xed, 0x6d, 0x64, 0xf0, 0x84, 0xa0, 0x82, 0x0d, 0x33, 0x03, 0x55, 0x1e, 0xa1, 0x2f, 0xd6,
	0xcb, 0x3e, 0x50, 0xaf, 0xaa, 0xf9, 0xb0, 0x0d, 0x29, 0xd0, 0xd2, 0xbb, 0x39, 0xf3, 0xff, 0xfd,
	0xe7, 0xcc, 0x9c, 0x33, 0x66, 0x00, 0xd4, 0x1f, 0xcd, 0x28, 0xc3, 0xe4, 0xa6, 0x9f, 0x8c, 0xc7,
	0xed, 0x09, 0x49, 0x58, 0x82, 0xf4, 0x49, 0xcf, 0xfb, 0xa2, 0x43, 0xb9, 0x9b, 0x44, 0xf8, 0x3a,
	0xbe, 0x4d, 0x10, 0x82, 0xc2, 0x5d, 0x42, 0x99, 0xad, 0xb9, 0x5a, 0xd3, 0xf2, 0xc5, 0x18, 0xed,
	0x83, 0x19, 0x73, 0x3d, 0xb2, 0x75, 0x57, 0x6b, 0x16, 0x7d, 0x15, 0x21, 0x07, 0xca, 0x24, 0xbc,
	0x65, 0x6f, 0x13, 0xc2, 0x6c, 0x43, 0x28, 0x59, 0x8c, 0x9a, 0xb0, 0x3b, 0x0f, 0x47, 0x33, 0x1c,
	0x60, 0x32, 0xc7, 0x44, 0x20, 0x05, 0x81, 0x3c, 0x9c, 0xe6, 0xab, 0x0c, 0xc8, 0x30, 0x12, 0x48,
	0x51, 0xae, 0x92, 0xc6, 0x5c, 0xa3, 0x98, 0xdc, 0x0a, 0xcd, 0x94, 0x5a, 0x1a, 0xa3, 0x7f, 0xc1,
	0xe2, 0xd9, 0x02, 0x16, 0x32, 0x6c, 0x97, 0x5c, 0xad, 0x59, 0xef, 0xd4, 0xda, 0x93, 0x5e, 0xdb,
	0x4f, 0x27, 0xfd, 0x5c, 0x47, 0x2d, 0x28, 0xb0, 0x70, 0x40, 0xed, 0xb2, 0x6b, 0x34, 0x2b, 0x9d,
	0x7d, 0xce, 0xa5, 0x47, 0x6e, 0xbf, 0x0b, 0x07, 0xf4, 0x32, 0x66, 0xe4, 0xde, 0x17, 0x8c, 0xf3,
	0x04, 0xac, 0x6c, 0x0a, 0x35, 0xc0, 0xf8, 0x88, 0xef, 0x55, 0x39, 0xf8, 0x10, 0xed, 0x41, 0x51,
	0x1c, 0x41, 0x14, 0xc3, 0xf2, 0x65, 0x70, 0xaa, 0x9f, 0x68, 0xde, 0x57, 0x0d, 0x2a, 0x3c, 0xfb,
	0x45, 0x32, 0x1e, 0x87, 0x71, 0x84, 0x9a, 0x60, 0x0e, 0x30, 0xbb, 0x18, 0x47, 0xc2, 0x5e, 0xe9,
	0xd4, 0x79, 0xda, 0x2b, 0x9c, 0xea, 0x2f, 0x77, 0x7c, 0xa5, 0x73, 0x92, 0x4a, 0x52, 0xcf, 0xc9,
	0x60, 0x89, 0x94, 0x3a, 0xfa, 0x1f, 0xac, 0x08, 0x8f, 0x30, 0xc3, 0x1c, 0x36, 0x04, 0xfc, 0x07,
	0x87, 0x5f, 0xc8, 0xc9, 0x8c, 0xcf, 0x29, 0x6e, 0x91, 0x0d, 0xe3, 0x96, 0x42, 0x6e, 0xe9, 0xca,
	0xc9, 0xdc, 0x92, 0x51, 0xcf, 0x8b, 0x60, 0xf4, 0xc7, 0x91, 0x77, 0x08, 0x90, 0x6f, 0xf7, 0xc7,
	0x52, 0x78, 0x8f, 0x00, 0x82, 0x0d, 0xfa, 0x72, 0xa9, 0xaa, 0xaa, 0x54, 0xde, 0x11, 0xd4, 0x96,
	0x76, 0xbb, 0x62, 0xe1, 0x5d, 0xa8, 0x2d, 0xed, 0xce, 0xfb, 0x04, 0x55, 0xd1, 0xd7, 0x38, 0x9c,
	0xd0, 0xbb, 0x84, 0xa1, 0x36, 0x14, 0x68, 0x1c, 0x4e, 0x6c, 0x4d, 0xf4, 0xd3, 0xc9, 0xfa, 0xae,
	0xf4, 0x36, 0x1f, 0xa8, 0x9e, 0x72, 0x8e, 0xf7, 0x34, 0x9b, 0xfa, 0xd5, 0x8d, 0x8a, 0x9e, 0x7e,
	0x33, 0xa0, 0xce, 0x57, 0xfe, 0x90, 0x30, 0x4c, 0xe4, 0x5d, 0x7a, 0x0c, 0xe6, 0x9c, 0x47, 0x54,
	0x65, 0x3f, 0x4c, 0xb3, 0xe7, 0x4c, 0x5b, 0x0c, 0xd5, 0xad, 0x52, 0x34, 0x7a, 0xc6, 0xfb, 0x10,
	0x2b, 0xab, 0x2e, 0xac, 0x47, 0x2b, 0xac, 0xdd, 0x94, 0x91, 0xee, 0xdc, 0x83, 0x8e, 0xa1, 0x18,
	0x27, 0x31, 0xa6, 0xb6, 0x21, 0xcc, 0x07, 0xab, 0xcd, 0x58, 0x19, 0x25, 0x8b, 0xce, 0xa0, 0x1c,
	0x8e, 0x46, 0xbc, 0x9a, 0xd4, 0x2e, 0x08, 0x9f, 0xbb, 0xc2, 0x77, 0xae, 0x10, 0x69, 0xcd, 0x1c,
	0xce, 0x53, 0xa8, 0x2c, 0x1c, 0xe5, 0x67, 0x95, 0x2b, 0x2f, 0x54, 0xce, 0x39, 0x83, 0xfa, 0xf2,
	0x51, 0xb6, 0x72, 0x9f, 0x00, 0xe4, 0x67, 0xd9, 0xca, 0x79, 0x0d, 0xb5, 0xa5, 0xd3, 0xac, 0x30,
	0x7b, 0x8b, 0xe6, 0x4a, 0xa7, 0xba, 0xf8, 0x73, 0xb0, 0xd8, 0x7c, 0x07, 0xcc, 0x2b, 0xcc, 0x7c,
	0x3c, 0x5d, 0x71, 0x45, 0x5f, 0x41, 0x49, 0x68, 0x74, 0x82, 0x5a, 0x50, 0xc4, 0x84, 0x24, 0x44,
	0xc8, 0xf5, 0xce, 0x5e, 0x76, 0x1b, 0x31, 0x99, 0x0f, 0xfb, 0xf8, 0x92, 0x6b, 0xbe, 0x44, 0xd6,
	0x7c, 0x12, 0xff, 0x81, 0x19, 0xac, 0x49, 0xb4, 0xc6, 0xf1, 0x06, 0x4a, 0xc1, 0x6f, 0xa4, 0xb7,
	0xa1, 0xd4, 0x27, 0x38, 0x64, 0x38, 0x52, 0x85, 0x4b, 0x43, 0xef, 0x00, 0x2c, 0xf9, 0x55, 0xae,
	0x3e, 0xae, 0x0f, 0x90, 0xca, 0xdb, 0xa7, 0x94, 0xbf, 0x45, 0x59, 0x4a, 0x15, 0x7a, 0x07, 0xf0,
	0xe7, 0x79, 0x7f, 0x3a, 0x1b, 0x12, 0xfc, 0x3e, 0x1e, 0x4e, 0x67, 0x38, 0xb8, 0x4b, 0x08, 0x93,
	0xdf, 0xbd, 0x8f, 0xa7, 0x5e, 0x0f, 0xfe, 0x5a, 0x2f, 0x6f, 0xb9, 0x89, 0x35, 0x4f, 0x58, 0xeb,
	0x14, 0xac, 0xec, 0xbd, 0x40, 0x00, 0xe6, 0x6b, 0x1c, 0x46, 0x98, 0x34, 0x76, 0x90, 0x05, 0x45,
	0x71, 0xf1, 0x1b, 0x1a, 0xaa, 0xf2, 0xe7, 0x51, 0x5e, 0xe4, 0x86, 0x8e, 0xca, 0x50, 0xe0, 0x17,
	0xb3, 0x61, 0xb4, 0x8e, 0xa0, 0xf1, 0x30, 0x1d, 0xaa, 0x81, 0xd5, 0x4d, 0x58, 0xba, 0x4a, 0xe7,
	0xb3, 0x2e, 0x5f, 0x04, 0xc5, 0x20, 0x17, 0x8c, 0x01, 0x66, 0x08, 0xd4, 0x43, 0xe0, 0xe3, 0xa9,
	0x53, 0xc9, 0xc6, 0x74, 0xe2, 0xed, 0xa0, 0x16, 0xd4, 0xfa, 0x49, 0x4c, 0x87, 0x94, 0xe1, 0x98,
	0x5d, 0x6d, 0x66, 0x5d, 0x30, 0x68, 0x4a, 0x04, 0x0b, 0x44, 0x90, 0x11, 0xff, 0x80, 0x29, 0x8b,
	0x8d, 0x6a, 0xf9, 0x23, 0xc1, 0xb9, 0xfa, 0x62, 0x28, 0xd0, 0x1b, 0xb0, 0xc3, 0x35, 0xd5, 0x46,
	0x7f, 0x73, 0x7a, 0x43, 0xab, 0x1c, 0x77, 0x33, 0xc0, 0x13, 0xf4, 0x4c, 0xf1, 0x8f, 0xe3, 0xf8,
	0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc8, 0xb0, 0xad, 0x87, 0x08, 0x00, 0x00,
}
