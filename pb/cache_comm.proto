/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pb;

// Each node is client and server at the same time.
// These operations are possible on every node in the cluster.
// And every node in the cluster is able to request these operations.
service CacheComm {
    rpc get(Get) returns (GetResponse) {}
    rpc gets(Gets) returns (GetsResponse) {}
    rpc getx(Getx) returns (GetxResponse) {}
    rpc invalidate(Inv) returns (InvAck) {}
}

// Not used anymore. Need to clean this up.
enum OriginalMessageType {
    GetMessageType = 0;
    GetxMessageType = 1;
}

enum CacheError {
    NoError = 0;
    Timeout = 1;
}

enum CacheLineState {
    // The cache line has been invalidated
    // and doesn't carry any buffer anymore.
    // Only metadata is present with a (potentially outdated)
    // node id of the onwer.
    Invalid = 0;
    // This cache line is held by the current node exclusively.
    // No other node has a copy of this cache line and the current
    // node is free to do whatever it pleases with the cache line.
    Exclusive = 1;
    // This cache line is held by the current node but a different
    // node is owning the cache line. This cache line holds a 
    // (potentially outdated) buffer.
    Shared = 2;
    // This cache line is held by the current node but not exclusively.
    // That means there are sharers of this cache line (nodes that have a copy)
    // of this cache line. In order to make changes to this cache line
    // all sharers need to be notified to invalidate their copies first.
    Owned = 3;
}

// A cache line is practically a ulid. See the following repo for more info:
// https://github.com/oklog/ulid
// This serializes to be pretty big (19bytes). I might end up trading this for
// something more compact in the end.
message CacheLineId {
    uint64 time = 1;
    bytes entropy = 2;
}

message NodeId {
    int32 id = 1;
}

message GetResponse {
    oneof innerMessage {
        Put put = 1;
        OwnerChanged ownerChanged = 2;
        Ack ack = 3;
    }
}

message GetsResponse {
    oneof innerMessage {
        Puts puts = 1;
        OwnerChanged ownerChanged = 2;
        Ack ack = 3;
    }
}

message GetxResponse {
    oneof innerMessage {
        Putx putx = 1;
        OwnerChanged ownerChanged = 2;
        Ack ack = 3;
    }
}

message Get {
    int32 senderId = 1;
    CacheLineId lineId = 2;
}

message Put {
    CacheError error = 1;
    int32 senderId = 2;
    CacheLineId lineId = 3;
    int32 version = 4;
    bytes buffer = 5;
}

message Ack {
    int32 senderId = 1;
    CacheLineId lineId = 2;
}

message Gets {
    int32 senderId = 1;
    CacheLineId lineId = 2;
}

message Puts {
    CacheError error = 1;
    int32 senderId = 2;
    CacheLineId lineId = 3;
    int32 version = 4;
    repeated int32 sharers = 5;
    bytes buffer = 6;
}

message Getx {
    int32 senderId = 1;
    CacheLineId lineId = 2;
}

message Putx {
    CacheError error = 1;
    int32 senderId = 2;
    CacheLineId lineId = 3;
    int32 version = 4;
    repeated int32 sharers = 5;
    bytes buffer = 6;
}

message Inv {
    int32 senderId = 1;
    CacheLineId lineId = 2;
}

message InvAck {
    CacheError error = 1;
    int32 senderId = 2;
    CacheLineId lineId = 3;
}

message ChangeOwner {
    int32 senderId = 1;
    CacheLineId lineId = 2;
    int32 version = 3;
    bytes buffer = 4;
}

message OwnerChanged {
    int32 senderId = 1;
    CacheLineId lineId = 2;
    int32 newOwnerId = 3;
    OriginalMessageType originalMessageType = 4;
}
