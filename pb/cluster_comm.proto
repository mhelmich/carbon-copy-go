/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pb;

message NodeInfo {
    // contains hostname
    string host = 1;
    // the unique id of a node
    int32 nodeId = 2;
    // the port on which the raft library operates
    int32 raftPort = 3;
    // the port on which the grpc consensus protocol operates
    int32 consensusPort = 4;
    // the port on which the grid protocol operates
    int32 gridPort = 5;
}

// these are the only two raft operations possible
enum RaftOps {
    Set = 0;
    Delete = 1;
}

// the raft api enforces string as key and value type
message RaftCommand {
    RaftOps cmd = 1;
    string key = 2;
    string value = 3;
}

// I decided to cheap this out and make all of this a proto
message RaftSnapshot {
    map<string, string> snap = 1;
}

service RaftCluster {
    rpc joinRaftCluster(RaftJoinRequest) returns (RaftJoinResponse) {}
    rpc get(GetReq) returns (GetResp) {}
    rpc set(SetReq) returns (SetResp) {}
    rpc delete(DeleteReq) returns (DeleteResp) {}
}

message RaftJoinRequest {
    string host = 1;
    int32 port = 2;
    string id = 3;
}

message RaftJoinResponse {
    bool ok = 1;
}

message GetReq {
    string key = 1;
}

message GetResp {
    string value = 1;
}

message SetReq {
    string key = 1;
    string value = 2;
}

message SetResp {
    bool created = 1;
}

message DeleteReq {
    string key = 1;
}

message DeleteResp {
    bool deleted = 1;
}
