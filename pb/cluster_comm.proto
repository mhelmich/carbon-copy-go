/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pb;

enum RaftState {
    Nonvoter = 0;
    Voter = 1;
    Leader = 2;
}

message MemberInfo {
    // the long node id is also used as serf and raft node id
    string longMemberId = 1;
    // contains hostname
    string host = 2;
    // the unique id of a node
    int32 shortMemberId = 3;
    // the port on which the raft library operates
    int32 raftPort = 4;
    // the port on which the grpc consensus protocol operates
    int32 raftServicePort = 5;
    // the port on which the grid protocol operates
    int32 gridPort = 6;
    // the port on which serf operates
    int32 serfPort = 7;
    // the state of a particular node
    RaftState raftState = 8;
    // copy of the serf tags
    map<string, string> tags = 9;
}

// This is the base raft command that can be sent.
// All actual commands need to appear in here and be part of this composition.
// Unfortunately that means that there's multiple places where messages need to be added.
// Here, on the sending side, and the receiving end. Well...you can't have everything in life.
message RaftCommand {
    oneof cmd {
        GetCommand getCmd = 1;
        SetCommand setCmd = 2;
        DeleteCommand deleteCmd = 3;
    }
}

// This is "consistent get" message.
// The advantage is: This read will be up-to-date with the strongly consistent store.
// The bad part is: It need to travel to the leader, be processed, and replicated.
// Pretty expensive if you can live with stale data, do that instead.
message GetCommand {
    string key = 1;
}

// This sets a key-value-pair in the consistent store.
message SetCommand {
    string key = 1;
    bytes value = 2;
}

// This deletes a key-value-pair from the consistent store.
message DeleteCommand {
    string key = 1;
}

// I decided to cheap this out and make all of this a proto
message RaftSnapshot {
    map<string, bytes> snap = 1;
}

// This service definition fulfills two different purposes:
// 1. It provides the ability for every node to join the raft cluster.
//    It does that by providing the joinRaftCluster RPC.
// 2. It provides the ability to access consensus values even though you're not part of the cluster.
service RaftService {
    rpc get(GetReq) returns (GetResp) {}
    rpc consistentGet(GetReq) returns (GetResp) {}
    rpc set(SetReq) returns (SetResp) {}
    rpc delete(DeleteReq) returns (DeleteResp) {}
}

enum RaftServiceError {
    NoRaftError = 0;
    NotLeaderRaftError = 1;
    KeyDoesntExistRaftError = 2;
}

message GetReq {
    string key = 1;
}

message GetResp {
    RaftServiceError error = 1;
    bytes value = 2;
}

message SetReq {
    string key = 1;
    bytes value = 2;
}

message SetResp {
    RaftServiceError error = 1;
    bool created = 2;
}

message DeleteReq {
    string key = 1;
}

message DeleteResp {
    RaftServiceError error = 1;
    bool deleted = 2;
}
