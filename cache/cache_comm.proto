/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package cache;

// each node is client and server at the same time
// these operations are possible on a server
service CacheComm {
    rpc get(Get) returns (GetResponse) {}
    rpc gets(Gets) returns (GetsResponse) {}
    rpc getx(Getx) returns (GetxResponse) {}
    rpc invalidate(Inv) returns (InvAck) {}
}

enum OriginalMessageType {
    GetMessageType = 0;
    GetxMessageType = 1;
}

enum CacheError {
    NoError = 0;
    Timeout = 1;
}

enum CacheLineState {
    Invalid = 0;
    Exclusive = 1;
    Shared = 2;
    Owned = 3;
}

// we could store cache line ids in UUIDs one day
// if we want to be really cool, we could take these
// 16 bytes apart and store them in two var-int64s
message Uuid {
    bytes data = 1;
}

message LineId {
    uint64 time = 1;
    bytes entropy = 2;
}

message GetResponse {
    oneof innerMessage {
        Put put = 1;
        OwnerChanged ownerChanged = 2;
        Ack ack = 3;
    }
}

message GetsResponse {
    oneof innerMessage {
        Puts puts = 1;
        OwnerChanged ownerChanged = 2;
        Ack ack = 3;
    }
}

message GetxResponse {
    oneof innerMessage {
        Putx putx = 1;
        OwnerChanged ownerChanged = 2;
        Ack ack = 3;
    }
}

message Get {
    int32 senderId = 1;
    LineId lineId = 2;
}

message Put {
    CacheError error = 1;
    int32 senderId = 2;
    LineId lineId = 3;
    int32 version = 4;
    bytes buffer = 5;
}

message Ack {
    int32 senderId = 1;
    LineId lineId = 2;
}

message Gets {
    int32 senderId = 1;
    LineId lineId = 2;
}

message Puts {
    CacheError error = 1;
    int32 senderId = 2;
    LineId lineId = 3;
    int32 version = 4;
    repeated int32 sharers = 5;
    bytes buffer = 6;
}

message Getx {
    int32 senderId = 1;
    LineId lineId = 2;
}

message Putx {
    CacheError error = 1;
    int32 senderId = 2;
    LineId lineId = 3;
    int32 version = 4;
    repeated int32 sharers = 5;
    bytes buffer = 6;
}

message Inv {
    int32 senderId = 1;
    LineId lineId = 2;
}

message InvAck {
    CacheError error = 1;
    int32 senderId = 2;
    LineId lineId = 3;
}

message ChangeOwner {
    int32 senderId = 1;
    LineId lineId = 2;
    int32 version = 3;
    bytes buffer = 4;
}

message OwnerChanged {
    int32 senderId = 1;
    LineId lineId = 2;
    int32 newOwnerId = 3;
    OriginalMessageType originalMessageType = 4;
}
